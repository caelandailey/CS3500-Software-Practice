// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 14.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace SpreadsheetGUITest
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// performed simple addition of two different cell values and saved it as SaveTest
        /// </summary>
        public void SaveAddition()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UIForm1Window.UISpreadsheetPanel1Window.UISpreadsheetPanel1Client;
            WinScrollBar uIItemScrollBar = this.UIForm1Window.UIItemWindow.UIItemScrollBar;
            WinClient uISpreadsheetPanel1Client1 = this.UIForm1Window.UIItemWindow1.UISpreadsheetPanel1Client;
            WinEdit uICellContentsEdit = this.UIForm1Window.UICellContentsWindow.UICellContentsEdit;
            WinButton uIEnterButton = this.UIForm1Window.UIEnterWindow.UIEnterButton;
            WinMenuItem uISaveMenuItem1 = this.UIForm1Window.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveMenuItem.UISaveMenuItem1;
            WinEdit uINameEdit = this.UISaveAsWindow.UIItemWindow.UIKBListItem.UINameEdit;
            WinEdit uINameEdit1 = this.UISaveAsWindow.UIItemWindow1.UIFall2015ListItem.UINameEdit;
            WinButton uIUptokbAltUpArrowButton = this.UISaveAsWindow.UIUpbandtoolbarToolBar.UIUptokbAltUpArrowButton;
            WinEdit uINameEdit2 = this.UISaveAsWindow.UIItemWindow2.UIFall2016ListItem.UINameEdit;
            WinComboBox uIFilenameComboBox = this.UISaveAsWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinButton uISaveButton = this.UISaveAsWindow.UISaveWindow.UISaveButton;
            WinList uIDesktopList = this.UIProgramManagerWindow.UIFolderViewWindow.UIDesktopList;
            WinButton uICloseButton = this.UIForm1Window.UIForm1TitleBar.UICloseButton;
            #endregion

            // Launch '%USERPROFILE%\Documents\kb\fall 2016\cs3500\assignments\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uIForm1Window = ApplicationUnderTest.Launch(this.SaveAdditionParams.UIForm1WindowExePath, this.SaveAdditionParams.UIForm1WindowAlternateExePath);

            // Type '{Up}' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client, this.SaveAdditionParams.UISpreadsheetPanel1ClientSendKeys, ModifierKeys.None);

            // Type '{Down}' in scroll bar
            Keyboard.SendKeys(uIItemScrollBar, this.SaveAdditionParams.UIItemScrollBarSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client1, new Point(70, 38));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client1, new Point(63, 34));

            // Type '3' in 'cellContents' text box
            uICellContentsEdit.Text = this.SaveAdditionParams.UICellContentsEditText;

            // Type '{Enter}' in 'cellContents' text box
            Keyboard.SendKeys(uICellContentsEdit, this.SaveAdditionParams.UICellContentsEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client1, new Point(145, 41));

            // Type '22' in 'cellContents' text box
            uICellContentsEdit.Text = this.SaveAdditionParams.UICellContentsEditText1;

            // Click 'Enter' button
            Mouse.Click(uIEnterButton, new Point(49, 5));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client1, new Point(59, 60));

            // Type 'answer' in 'cellContents' text box
            uICellContentsEdit.Text = this.SaveAdditionParams.UICellContentsEditText2;

            // Type '{Enter}' in 'cellContents' text box
            Keyboard.SendKeys(uICellContentsEdit, this.SaveAdditionParams.UICellContentsEditSendKeys1, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client1, new Point(158, 54));

            // Type '=a1+b1' in 'cellContents' text box
            uICellContentsEdit.Text = this.SaveAdditionParams.UICellContentsEditText3;

            // Click 'Enter' button
            Mouse.Click(uIEnterButton, new Point(18, 22));

            // Click 'File' -> 'Save' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem1, new Point(50, 17));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(33, 6));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit1, new Point(64, 6));

            // Click 'Up to "kb" (Alt + Up Arrow)' button
            Mouse.Click(uIUptokbAltUpArrowButton, new Point(20, 20));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit2, new Point(83, 14));

            // Select 'testSave' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.SaveAdditionParams.UIFilenameComboBoxEditableItem;

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(56, 15));

            // Click 'Desktop' list box
            Mouse.Click(uIDesktopList, new Point(699, 61));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(23, 17));
        }
        
        /// <summary>
        /// this is for method testAddition
        /// </summary>
        public void AssertAddition()
        {
            #region Variable Declarations
            WinEdit uICellValueEdit = this.UIForm1Window.UICellValueWindow.UICellValueEdit;
            #endregion

            // Verify that the 'Text' property of 'cellValue' text box equals '25'
            Assert.AreEqual(this.AssertAdditionExpectedValues.UICellValueEditText, uICellValueEdit.Text, "sum was incorrect");
        }
        
        #region Properties
        public virtual SaveAdditionParams SaveAdditionParams
        {
            get
            {
                if ((this.mSaveAdditionParams == null))
                {
                    this.mSaveAdditionParams = new SaveAdditionParams();
                }
                return this.mSaveAdditionParams;
            }
        }
        
        public virtual AssertAdditionExpectedValues AssertAdditionExpectedValues
        {
            get
            {
                if ((this.mAssertAdditionExpectedValues == null))
                {
                    this.mAssertAdditionExpectedValues = new AssertAdditionExpectedValues();
                }
                return this.mAssertAdditionExpectedValues;
            }
        }
        
        public UIForm1Window UIForm1Window
        {
            get
            {
                if ((this.mUIForm1Window == null))
                {
                    this.mUIForm1Window = new UIForm1Window();
                }
                return this.mUIForm1Window;
            }
        }
        
        public UISaveAsWindow UISaveAsWindow
        {
            get
            {
                if ((this.mUISaveAsWindow == null))
                {
                    this.mUISaveAsWindow = new UISaveAsWindow();
                }
                return this.mUISaveAsWindow;
            }
        }
        
        public UIProgramManagerWindow UIProgramManagerWindow
        {
            get
            {
                if ((this.mUIProgramManagerWindow == null))
                {
                    this.mUIProgramManagerWindow = new UIProgramManagerWindow();
                }
                return this.mUIProgramManagerWindow;
            }
        }
        #endregion
        
        #region Fields
        private SaveAdditionParams mSaveAdditionParams;
        
        private AssertAdditionExpectedValues mAssertAdditionExpectedValues;
        
        private UIForm1Window mUIForm1Window;
        
        private UISaveAsWindow mUISaveAsWindow;
        
        private UIProgramManagerWindow mUIProgramManagerWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SaveAddition'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SaveAdditionParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\kb\fall 2016\cs3500\assignments\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIForm1WindowExePath = "C:\\Users\\Karina\\Documents\\kb\\fall 2016\\cs3500\\assignments\\PS4\\SpreadsheetGUI\\bin\\" +
            "Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\kb\fall 2016\cs3500\assignments\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIForm1WindowAlternateExePath = "%USERPROFILE%\\Documents\\kb\\fall 2016\\cs3500\\assignments\\PS4\\SpreadsheetGUI\\bin\\De" +
            "bug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '{Up}' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys = "{Up}";
        
        /// <summary>
        /// Type '{Down}' in scroll bar
        /// </summary>
        public string UIItemScrollBarSendKeys = "{Down}";
        
        /// <summary>
        /// Type '3' in 'cellContents' text box
        /// </summary>
        public string UICellContentsEditText = "3";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContents' text box
        /// </summary>
        public string UICellContentsEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '22' in 'cellContents' text box
        /// </summary>
        public string UICellContentsEditText1 = "22";
        
        /// <summary>
        /// Type 'answer' in 'cellContents' text box
        /// </summary>
        public string UICellContentsEditText2 = "answer";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContents' text box
        /// </summary>
        public string UICellContentsEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '=a1+b1' in 'cellContents' text box
        /// </summary>
        public string UICellContentsEditText3 = "=a1+b1";
        
        /// <summary>
        /// Select 'testSave' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "testSave";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertAddition'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertAdditionExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'cellValue' text box equals '25'
        /// </summary>
        public string UICellValueEditText = "25";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIForm1Window : WinWindow
    {
        
        public UIForm1Window()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Form1";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public UISpreadsheetPanel1Window UISpreadsheetPanel1Window
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Window == null))
                {
                    this.mUISpreadsheetPanel1Window = new UISpreadsheetPanel1Window(this);
                }
                return this.mUISpreadsheetPanel1Window;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow1 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow1(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UICellContentsWindow UICellContentsWindow
        {
            get
            {
                if ((this.mUICellContentsWindow == null))
                {
                    this.mUICellContentsWindow = new UICellContentsWindow(this);
                }
                return this.mUICellContentsWindow;
            }
        }
        
        public UIEnterWindow UIEnterWindow
        {
            get
            {
                if ((this.mUIEnterWindow == null))
                {
                    this.mUIEnterWindow = new UIEnterWindow(this);
                }
                return this.mUIEnterWindow;
            }
        }
        
        public UIMenuStrip1MenuBar UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        
        public UIForm1TitleBar UIForm1TitleBar
        {
            get
            {
                if ((this.mUIForm1TitleBar == null))
                {
                    this.mUIForm1TitleBar = new UIForm1TitleBar(this);
                }
                return this.mUIForm1TitleBar;
            }
        }
        
        public UICellValueWindow UICellValueWindow
        {
            get
            {
                if ((this.mUICellValueWindow == null))
                {
                    this.mUICellValueWindow = new UICellValueWindow(this);
                }
                return this.mUICellValueWindow;
            }
        }
        #endregion
        
        #region Fields
        private UISpreadsheetPanel1Window mUISpreadsheetPanel1Window;
        
        private UIItemWindow mUIItemWindow;
        
        private UIItemWindow1 mUIItemWindow1;
        
        private UICellContentsWindow mUICellContentsWindow;
        
        private UIEnterWindow mUIEnterWindow;
        
        private UIMenuStrip1MenuBar mUIMenuStrip1MenuBar;
        
        private UIForm1TitleBar mUIForm1TitleBar;
        
        private UICellValueWindow mUICellValueWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISpreadsheetPanel1Window : WinWindow
    {
        
        public UISpreadsheetPanel1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spreadsheetPanel1";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.SCROLLBAR", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinScrollBar UIItemScrollBar
        {
            get
            {
                if ((this.mUIItemScrollBar == null))
                {
                    this.mUIItemScrollBar = new WinScrollBar(this);
                    #region Search Criteria
                    this.mUIItemScrollBar.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUIItemScrollBar;
            }
        }
        #endregion
        
        #region Fields
        private WinScrollBar mUIItemScrollBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UICellContentsWindow : WinWindow
    {
        
        public UICellContentsWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cellContents";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellContentsEdit
        {
            get
            {
                if ((this.mUICellContentsEdit == null))
                {
                    this.mUICellContentsEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellContentsEdit.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUICellContentsEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellContentsEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIEnterWindow : WinWindow
    {
        
        public UIEnterWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "enterButton";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinButton UIEnterButton
        {
            get
            {
                if ((this.mUIEnterButton == null))
                {
                    this.mUIEnterButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIEnterButton.SearchProperties[WinButton.PropertyNames.Name] = "Enter";
                    this.mUIEnterButton.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUIEnterButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIEnterButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIMenuStrip1MenuBar : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFileMenuItem : WinMenuItem
    {
        
        public UIFileMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public UISaveMenuItem UISaveMenuItem
        {
            get
            {
                if ((this.mUISaveMenuItem == null))
                {
                    this.mUISaveMenuItem = new UISaveMenuItem(this);
                }
                return this.mUISaveMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UISaveMenuItem mUISaveMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISaveMenuItem : WinMenuItem
    {
        
        public UISaveMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Save";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UISaveMenuItem1
        {
            get
            {
                if ((this.mUISaveMenuItem1 == null))
                {
                    this.mUISaveMenuItem1 = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISaveMenuItem1.SearchProperties[WinMenuItem.PropertyNames.Name] = "Save";
                    this.mUISaveMenuItem1.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISaveMenuItem1.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mUISaveMenuItem1.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUISaveMenuItem1;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUISaveMenuItem1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIForm1TitleBar : WinTitleBar
    {
        
        public UIForm1TitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UICellValueWindow : WinWindow
    {
        
        public UICellValueWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cellValue";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellValueEdit
        {
            get
            {
                if ((this.mUICellValueEdit == null))
                {
                    this.mUICellValueEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellValueEdit.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUICellValueEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellValueEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISaveAsWindow : WinWindow
    {
        
        public UISaveAsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Save As";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UIItemWindow2 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow2(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow11 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow11(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIUpbandtoolbarToolBar UIUpbandtoolbarToolBar
        {
            get
            {
                if ((this.mUIUpbandtoolbarToolBar == null))
                {
                    this.mUIUpbandtoolbarToolBar = new UIUpbandtoolbarToolBar(this);
                }
                return this.mUIUpbandtoolbarToolBar;
            }
        }
        
        public UIItemWindow21 UIItemWindow2
        {
            get
            {
                if ((this.mUIItemWindow2 == null))
                {
                    this.mUIItemWindow2 = new UIItemWindow21(this);
                }
                return this.mUIItemWindow2;
            }
        }
        
        public UIDetailsPanePane UIDetailsPanePane
        {
            get
            {
                if ((this.mUIDetailsPanePane == null))
                {
                    this.mUIDetailsPanePane = new UIDetailsPanePane(this);
                }
                return this.mUIDetailsPanePane;
            }
        }
        
        public UISaveWindow UISaveWindow
        {
            get
            {
                if ((this.mUISaveWindow == null))
                {
                    this.mUISaveWindow = new UISaveWindow(this);
                }
                return this.mUISaveWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow2 mUIItemWindow;
        
        private UIItemWindow11 mUIItemWindow1;
        
        private UIUpbandtoolbarToolBar mUIUpbandtoolbarToolBar;
        
        private UIItemWindow21 mUIItemWindow2;
        
        private UIDetailsPanePane mUIDetailsPanePane;
        
        private UISaveWindow mUISaveWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UIKBListItem UIKBListItem
        {
            get
            {
                if ((this.mUIKBListItem == null))
                {
                    this.mUIKBListItem = new UIKBListItem(this);
                }
                return this.mUIKBListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIKBListItem mUIKBListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIKBListItem : WinListItem
    {
        
        public UIKBListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "kb";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow11 : WinWindow
    {
        
        public UIItemWindow11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UIFall2015ListItem UIFall2015ListItem
        {
            get
            {
                if ((this.mUIFall2015ListItem == null))
                {
                    this.mUIFall2015ListItem = new UIFall2015ListItem(this);
                }
                return this.mUIFall2015ListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFall2015ListItem mUIFall2015ListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFall2015ListItem : WinListItem
    {
        
        public UIFall2015ListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "fall2015";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIUpbandtoolbarToolBar : WinToolBar
    {
        
        public UIUpbandtoolbarToolBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinToolBar.PropertyNames.Name] = "Up band toolbar";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UIUptokbAltUpArrowButton
        {
            get
            {
                if ((this.mUIUptokbAltUpArrowButton == null))
                {
                    this.mUIUptokbAltUpArrowButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIUptokbAltUpArrowButton.SearchProperties[WinButton.PropertyNames.Name] = "Up to \"kb\" (Alt + Up Arrow)";
                    this.mUIUptokbAltUpArrowButton.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIUptokbAltUpArrowButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIUptokbAltUpArrowButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow21 : WinWindow
    {
        
        public UIItemWindow21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UIFall2016ListItem UIFall2016ListItem
        {
            get
            {
                if ((this.mUIFall2016ListItem == null))
                {
                    this.mUIFall2016ListItem = new UIFall2016ListItem(this);
                }
                return this.mUIFall2016ListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFall2016ListItem mUIFall2016ListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFall2016ListItem : WinListItem
    {
        
        public UIFall2016ListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "fall 2016";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDetailsPanePane : WinPane
    {
        
        public UIDetailsPanePane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Details Pane";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISaveWindow : WinWindow
    {
        
        public UISaveWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UISaveButton
        {
            get
            {
                if ((this.mUISaveButton == null))
                {
                    this.mUISaveButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISaveButton.SearchProperties[WinButton.PropertyNames.Name] = "Save";
                    this.mUISaveButton.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUISaveButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISaveButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIProgramManagerWindow : WinWindow
    {
        
        public UIProgramManagerWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Program Manager";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Progman";
            this.WindowTitles.Add("Program Manager");
            #endregion
        }
        
        #region Properties
        public UIFolderViewWindow UIFolderViewWindow
        {
            get
            {
                if ((this.mUIFolderViewWindow == null))
                {
                    this.mUIFolderViewWindow = new UIFolderViewWindow(this);
                }
                return this.mUIFolderViewWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIFolderViewWindow mUIFolderViewWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFolderViewWindow : WinWindow
    {
        
        public UIFolderViewWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Program Manager");
            #endregion
        }
        
        #region Properties
        public WinList UIDesktopList
        {
            get
            {
                if ((this.mUIDesktopList == null))
                {
                    this.mUIDesktopList = new WinList(this);
                    #region Search Criteria
                    this.mUIDesktopList.SearchProperties[WinList.PropertyNames.Name] = "Desktop";
                    this.mUIDesktopList.WindowTitles.Add("Program Manager");
                    #endregion
                }
                return this.mUIDesktopList;
            }
        }
        #endregion
        
        #region Fields
        private WinList mUIDesktopList;
        #endregion
    }
}
